{"version":3,"sources":["Components/TodoItem.js","Components/TodoList.js","Components/Header.js","Components/About.js","Components/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","props","todo","completed","handleBox","this","id","title","className","type","onChange","markComplete","bind","checked","style","onClick","delTodo","Component","TodoList","todos","map","key","headerStyle","background","color","textAlign","padding","linkStyle","Header","to","About","Fragment","AddItem","state","e","setState","target","value","onSubmit","preventDefault","addItem","display","name","flex","placeholder","App","Axios","delete","then","response","filter","post","data","get","exact","path","render","component","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3806a1dd.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class TodoItem extends Component {\n    \n    // Change text-decoration for text \n    getStyle = () => {\n        return {\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    } \n\n    // Toggles true or false on checked attribute of checkbox\n    handleBox = () => this.props.todo.completed ? true : false\n    \n\n    render() {\n        const { id, title } = this.props.todo\n        return (\n            <div className=\"item-div\">\n                <input className=\"checkbox\" type='checkbox' onChange={this.props.markComplete.bind(this, id)} checked={this.handleBox()}/> {' '}\n                <p style={this.getStyle()} className=\"item-txt\">\n                    {title}\n                </p>\n                <button className=\"dlt-btn\" onClick={this.props.delTodo.bind(this, id)}>DELETE</button>\n            </div>\n        )\n    }\n}\n\n// Proptypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n\n\n\n\n","import React, { Component } from 'react'\nimport TodoItem from './TodoItem'\nimport PropTypes from 'prop-types'\n\nexport default class TodoList extends Component {\n\n    render() {\n        return this.props.todos.map(todo => (\n            <TodoItem \n                key={todo.id}  \n                todo={todo} \n                markComplete={this.props.markComplete} \n                delTodo={this.props.delTodo}\n            />\n        ))\n    }\n}\n\n// Proptypes\nTodoList.propTypes = {\n    todos: PropTypes.array.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nconst Header = () => {\n    return (\n        <header style={headerStyle}>\n            <h1>Todo List</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    );\n};\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}\n\nconst linkStyle = {\n    color: '#fff',\n    textDecoration: 'none'\n}\n\nexport default Header;","import React from 'react';\n\nconst About = () => {\n    return (\n        <React.Fragment>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.0.</p>\n        </React.Fragment>\n    );\n};\n\nexport default About;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class AddItem extends Component {\n    state = {\n        title: ''\n    }\n\n    // On change handler for input field\n    onChange = e => {\n        this.setState({\n            title: e.target.value\n        })\n    }\n\n    // On submit handler for form\n    onSubmit = e => {\n        e.preventDefault();\n        this.props.addItem(this.state.title);\n        this.setState({ title: '' });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\n                <input \n                    type=\"text\"\n                    name=\"title\"\n                    style={{ flex: '10', padding: '5px' }}\n                    placeholder=\"Add todo ...\"\n                    value={this.state.title} \n                    onChange={this.onChange}\n                />\n                <input \n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn\"\n                    style={{ flex: '1' }}\n                />\n            </form>\n        )\n    }\n}\n\n// Proptypes\nAddItem.propTypes = {\n    addItem: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport TodoList from './Components/TodoList'\nimport Header from './Components/Header'\nimport About from './Components/About'\nimport AddItem from './Components/AddItem'\n// import uuid from 'uuid'\n\nimport './App.css';\nimport Axios from 'axios';\n\n\nexport default class App extends React.Component {\n  state = {\n    todos: [],\n  }\n\n  // Get data from API\n  componentDidMount() {\n    Axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(response => this.setState({ todos: response.data }))\n  }\n\n  // Toggle Complete\n  markComplete = id => {\n    this.setState({ todo: this.state.todos.map(todo => {\n      if(todo.id === id) {\n        todo.completed = !todo.completed\n      } \n      return todo\n    })})\n  }\n\n  // Delete item\n  delTodo = id => {\n    Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(response => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]}))\n    \n  }\n\n  // Add Item\n  addItem = title => {\n      Axios.post('https://jsonplaceholder.typicode.com/todos', {\n        title,\n        completed: false\n      })\n      .then(response => this.setState({ todos: [...this.state.todos, response.data]}))\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddItem addItem={this.addItem}/>\n                <TodoList \n                  todos={this.state.todos} \n                  markComplete={this.markComplete} \n                  delTodo={this.delTodo}\n                />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}